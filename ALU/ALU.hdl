// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: tools/builtIn/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, yï¿½x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 * Which function to compute is determined by 6 input bits 
 * denoted zx, nx, zy, ny, f, no.
 * The computed function's value is called "out".
 * In addition to computing out, the ALU computes two 
 * 1-bit outputs called zr and ng:
 * if out == 0, zr = 1; otherwise zr = 0;
 * If out < 0, ng = 1; otherwise ng = 0.
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and 
 * their effect are documented in the book. 
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1


CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:
        //X Logic
        Mux16(a=x,b[0..15]=false,sel=zx,out=zdx) ; //Zero X Bit
        Not16(in=zdx,out=notx) ; //Not of X
        Mux16(a=zdx,b=notx,sel=nx,out=ndx) ; //Chooses either x or notx
        
        //Y Logic
        Mux16(a=y,b[0..15]=false,sel=zy,out=zdy) ; //Zero Y Bit
        Not16(in=zdy,out=noty) ; //Not of Y
        Mux16(a=zdy,b=noty,sel=ny,out=ndy) ; //Choose either y or noty

        //Arithmetic Selection
        Add16(a=ndx,b=ndy,out = xplusy) ; // x+y
        And16(a=ndx,b=ndy,out = xandy) ; // x&y
        Mux16(a=xandy,b=xplusy,sel=f,out=fxy) ; //Choose either addition or anding
        Not16(in=fxy,out=nfxy) ; //Not the output of our addition or anding selection
        Mux16(a=fxy,b=nfxy,sel=no,out[0..7]=out1,out[8..15]=out2,out=oo) ; //Choose from the not of addition ro anding selection or result of our addition or anding selection

        //ZR Logic
        Or8Way(in=out1,out = one) ;
        Or8Way(in=out2,out = two) ;
        Or(a=one,b=two,out=o) ;
        Not(in=o,out=zr) ;

        //NG Logic
        And16(a[0..15] = true,b=oo,out[15]=ng,out[0..14] =drop) ; 

        //Output
        Or16(a=oo,b[0..15]=false,out=out) ; 

}
